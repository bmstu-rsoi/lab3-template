version: "3"
services:
  postgres:
    image: library/postgres:13
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./postgres/:/docker-entrypoint-initdb.d/
    ports:
      - "5431:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5

  car:
    image: car
    build:
      context: CarsService
      dockerfile: Dockerfile
    container_name: car
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8070:8070"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/cars
      - SPRING_DATASOURCE_USERNAME=program
      - SPRING_DATASOURCE_PASSWORD=test

  payment:
    image: payment
    build:
      context: PaymentService
      dockerfile: Dockerfile
    container_name: payment
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8050:8050"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/payments
      - SPRING_DATASOURCE_USERNAME=program
      - SPRING_DATASOURCE_PASSWORD=test

  rental:
    image: rental
    build:
      context: RentalService
      dockerfile: Dockerfile
    container_name: rental
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8060:8060"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/rentals
      - SPRING_DATASOURCE_USERNAME=program
      - SPRING_DATASOURCE_PASSWORD=test
      - GW=http://gw:8080/api/v1

  gw:
    image: gw
    build:
      context: GatewayService
      dockerfile: Dockerfile
    container_name: gateway_serivce
    depends_on:
      - rental
      - car
      - payment
    ports:
      - "8080:8080"

volumes:
  db-data:
